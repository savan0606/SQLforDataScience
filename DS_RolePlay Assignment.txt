Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
select count(*) from Attribute

ii. Business table = 10000
select count(*) from Business

iii. Category table = 10000
select count(*) from Category

iv. Checkin table = 10000
select count(*) from Checkin

v. elite_years table = 10000
select count(*) from elite_years

vi. friend table =  10000
select count(*) from friend

vii. hours table = 10000
select count(*) from hours

viii. photo table = 10000
select count(*) from photo

ix. review table = 10000
select count(*) from review

x. tip table = 10000
select count(*) from tip

xi. user table = 10000
select count(*) from user	



2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
select count(distinct id) from Business

ii. Hours = 1562
select count(distinct business_id) from hours

iii. Category = 2643
select count(distinct business_id) from category

iv. Attribute = 1115
select count(distinct business_id) from attribute

v. Review = 10000
select count(distinct id) from review

vi. Checkin = 493
select count(distinct business_id) from checkin

vii. Photo = 10000
select count(distinct id) from photo

viii. Tip = 537(user_id), 3979(business_id)
select count(distinct user_id) from tip
select count(distinct business_id) from tip

ix. User = 10000
select count(distinct id) from user

x. Friend = 11
select count(distinct user_id) from friend

xi. Elite_years = 2780
select count(distinct user_id) from elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

	SELECT count(*) - count(id),
	count(*) - count(name),
	count(*) - count(review_count),
	count(*) - count(yelping_since),
	count(*) - count(useful),
	count(*) - count(cool),
	count(*) - count(fans),
	count(*) - count(average_stars),
	count(*) - count(compliment_hot),
	count(*) - count(compliment_more),
	count(*) - count(compliment_profile),
	count(*) - count(compliment_cute),
	count(*) - count(compliment_list),
	count(*) - count(compliment_note),
	count(*) - count(compliment_plain),
	count(*) - count(compliment_cool),
	count(*) - count(compliment_funny),
	count(*) - count(compliment_writer),
	count(*) - count(compliment_photos)
	FROM user
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	select min(stars), max(stars), avg(stars) from review

	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	select min(stars), max(stars), avg(stars) from business

	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	select min(likes), max(likes), avg(likes) from tip

	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	select min(count), max(count), avg(count) from checkin

	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		
	select min(review_count), max(review_count), avg(review_count) from user


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	select sum(review_count) as total_reviews, city from business
	group by city
	order by total_reviews desc
	
	Copy and Paste the Result Below:
	
	+---------------+-----------------+
	| total_reviews | city            |
	+---------------+-----------------+
	|         82854 | Las Vegas       |
	|         34503 | Phoenix         |
	|         24113 | Toronto         |
	|         20614 | Scottsdale      |
	|         12523 | Charlotte       |
	|         10871 | Henderson       |
	|         10504 | Tempe           |
	|          9798 | Pittsburgh      |
	|          9448 | Montréal        |
	|          8112 | Chandler        |
	|          6875 | Mesa            |
	|          6380 | Gilbert         |
	|          5593 | Cleveland       |
	|          5265 | Madison         |
	|          4406 | Glendale        |
	|          3814 | Mississauga     |
	|          2792 | Edinburgh       |
	|          2624 | Peoria          |
	|          2438 | North Las Vegas |
	|          2352 | Markham         |
	|          2029 | Champaign       |
	|          1849 | Stuttgart       |
	|          1520 | Surprise        |
	|          1465 | Lakewood        |
	|          1155 | Goodyear        |
	+---------------+-----------------+
	(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select stars as star_rating, count(stars) as count
from business
where city='Avon'
group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

select stars as star_rating, count(stars) as count
from business
where city='Beachwood'
group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	select name, sum(review_count) as total_review
	from user
	group by id
	order by total_review desc
	limit 3	
	
	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | total_review |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	Yes, more reviews correlate with more fans.

	select review_range, count(*) as total_user, avg(fans) as avg_fans
	from (select case 
             when review_count between 0 and 19 then '0000-0019'
             when review_count between 20 and 99 then '0020-0099'
             when review_count between 100 and 499 then '0100-0499'
             when review_count between 500 and 999 then '0500-0999'
             else '1000 & MORE' 
             end as review_range,
             fans
    	     from user)
	group by review_range

	+--------------+------------+----------------+
	| review_range | total_user |       avg_fans |
	+--------------+------------+----------------+
	| 0000-0019    |       7842 | 0.170874776843 |
	| 0020-0099    |       1643 |  1.67315885575 |
	| 0100-0499    |        467 |  14.3768736617 |
	| 0500-0999    |         40 |           76.4 |
	| 1000 & MORE  |          8 |        129.625 |
	+--------------+------------+----------------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, there are more reviews with the word "love" than "hate".

	
	SQL code used to arrive at answer:

	select category, count(*) as occurrence
	from (select case 
             when text like '%love%' then 'love'
             when text like '%hate%' then 'hate'
             else null 
             end as category
	     from review)
	group by category

	+----------+------------+
	| category | occurrence |
	+----------+------------+
	|     None |       8042 |
	|     hate |        178 |
	|     love |       1780 |
	+----------+------------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	select name, sum(fans) as total_fans
	from user
	group by id
	order by total_fans desc
	limit 10	

	Copy and Paste the Result Below:

	+-----------+------------+
	| name      | total_fans |
	+-----------+------------+
	| Amy       |        503 |
	| Mimi      |        497 |
	| Harald    |        311 |
	| Gerald    |        253 |
	| Christine |        173 |
	| Lisa      |        159 |
	| Cat       |        133 |
	| William   |        126 |
	| Fran      |        124 |
	| Lissa     |        120 |
	+-----------+------------+	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

The two groups have nearly same distribution of hours(days).

select case when stars>=4.0 and stars<=5.0 then '4-5 stars'
            when stars>=2.0 and stars<3.0 then '2-3 stars'
            else '0-2 & 3-4 stars'
            end as stars,
       count(distinct business.id) as no_of_businesses,
       count(hours) as total_open_days,
       count(hours)*1.0/count(distinct business.id)  as avg_open_days
from ((business inner join hours on business.id = hours.business_id)
     inner join category on business.id = category.business_id)
where city = 'Toronto' and category.category ='Food'
group by stars

+-----------+------------------+-----------------+---------------+
| stars     | no_of_businesses | total_open_days | avg_open_days |
+-----------+------------------+-----------------+---------------+
| 2-3 stars |                1 |               7 |           7.0 |
| 4-5 stars |                2 |              13 |           6.5 |
+-----------+------------------+-----------------+---------------+

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, two groups have different number of reviews.

select case when stars>=4.0 and stars<=5.0 then '4-5 stars'
            when stars>=2.0 and stars<3.0 then '2-3 stars'
            else '0-2 & 3-4 stars'
            end as stars,
       count(distinct business.id) as no_of_businesses,
       sum(review_count) as total_reviews,
       sum(review_count)*1.0/count(distinct business.id)  as avg_total_reviews
from (business inner join category on business.id = category.business_id)
where city = 'Toronto' and category.category ='Food'
group by stars

+-----------------+------------------+---------------+-------------------+
| stars           | no_of_businesses | total_reviews | avg_total_reviews |
+-----------------+------------------+---------------+-------------------+
| 0-2 & 3-4 stars |                1 |             3 |               3.0 |
| 2-3 stars       |                1 |            10 |              10.0 |
| 4-5 stars       |                2 |            41 |              20.5 |
+-----------------+------------------+---------------+-------------------+         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

All the businesses are at different locations.

select case when stars>=4.0 and stars<=5.0 then '4-5 stars'
            when stars>=2.0 and stars<3.0 then '2-3 stars'
            else '0-2 & 3-4 stars'
            end as stars,
       neighborhood,
       address,
       postal_code
from (business inner join category on business.id = category.business_id)
where city = 'Toronto' and category.category ='Food'
order by stars

+-----------------+-----------------+----------------------+-------------+
| stars           | neighborhood    | address              | postal_code |
+-----------------+-----------------+----------------------+-------------+
| 0-2 & 3-4 stars |                 | 3003 Bathurst Street | M6B         |
| 2-3 stars       | Roncesvalles    | 2280 Dundas Street W | M6R 1X3     |
| 4-5 stars       | High Park       | 1669 Bloor Street W  | M6P 1A6     |
| 4-5 stars       | Wallace Emerson | 247 Wallace Avenue   | M6H 1V5     |
+-----------------+-----------------+----------------------+-------------+		
		

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Open businesses are much more than closed ones.
         
select count(*) as total_open
from business
where is_open=1

+------------+
| total_open |
+------------+
|       8480 |
+------------+
         
ii. Difference 2: The average number of reviews per business is more for opened ones compared to closed ones.
         
SQL code used for analysis:

select is_open, 
sum(review_count)*1.0/count(id) as avg_review_per_business,
sum(review_count) as total_review, 
avg(stars) as avg_stars
from business
group by is_open

+---------+-------------------------+--------------+---------------+
| is_open | avg_review_per_business | total_review |     avg_stars |
+---------+-------------------------+--------------+---------------+
|       0 |           23.1980263158 |        35261 | 3.52039473684 |
|       1 |           31.7570754717 |       269300 | 3.67900943396 |
+---------+-------------------------+--------------+---------------+         
         
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: Which city has the highest number of businesses and which category is the most popular at that city?
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I will need mainly two tables. One is business to find the city which has most number of businesses and other is category to find the most popular category.

If anybody wants to develop his own business, it will help him to choose the best city and in which category hw should open business.
                           
                  
iii. Output of your finished dataset:
+-----------+----------------+---------------------+
| city      | total_business | popular_business    |
+-----------+----------------+---------------------+
| Toronto   |             24 | Yoga                |
| Phoenix   |             21 | Wholesalers         |
| Las Vegas |             17 | Visitor Centers     |
| Chandler  |             10 | Transmission Repair |
| Charlotte |             10 | Vape Shops          |
+-----------+----------------+---------------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

select city, count(distinct b.id) as total_business, max(distinct c.category) as popular_business
from business b inner join category c
on b.id = c.business_id
group by city
order by total_business desc
limit 5